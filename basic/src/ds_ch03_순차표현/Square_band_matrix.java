package ds_ch03_순차표현;

/*
3.7 정방 밴드 행렬 A(n,a)
    주 대각선 위, 아래에 a-1개의 대각선

밴드 내의 원소 수: n^2-(n-a)(n-a+1)
밴드 안의 원소 a(ij)에 대해 i, j의 관계
    밴드 너비와 관련 있을 것 같은데
    아래쪽 대각선: i-j+1 >>> 밴드
    위쪽 대각선: j-i+1 >>> 밴드

A를 1차원 배열 B에 저장할 때
A의 하위 밴드에 있는 원소 a(i, j)의 B 주소를 구하는 공식은?

각 밴드의 원소 수
    아래쪽 밴드
    위쪽 밴드


1차원 배열에서의 위치
    아래쪽 대각선: 직전 대각선까지의 원소 수 합 + 해당 밴드에서의 오프셋
        첫번째 대각선 원소 수: n-(a-1)
        두번째 대각선 원소 수: n-(a-2)
        ...
        가운데 대각선 원소 수: n-(a-a)

        1 ~ (a-(a-(찾을i-찾을j)-1)) >>>

        직전 대각선까지 원소 수 합 (아래쪽, 주대각선)
            n-(a-1)+
            n-(a-2)+
            ...+
            n-(a-(a-(찾을i-찾을j)-1))

        for(int x = 1; x < (a-(찾을i-찾을j)-1); x++) {
            직전합 += n-(a-(x));
        }
        위치 = 직전합 + 오프셋 (찾을j)

        직전 대각선까지 원소 수 합 (위쪽)
            아래쪽 총합+
            (n-1)+
            (n-2)+
            (n-3)+
            ...+
            (n-(찾을j-찾을i)-1)

        직전합 = 아래쪽 총합
        for(int x = 1; x < (찾을j-찾을i)-1; x++) {
            직전합 += n-x;
        }
        위치 = 직전합 + 오프셋(찾을i)



        오프셋
            아래쪽 밴드: 찾을j
            위쪽 밴드: 찾을i


    위쪽 대각선: 아래쪽 대각선 + 주 대각선 + 직전 대각선 + 오프셋

 */

public class Square_band_matrix {

    public static void main(String[] args) {

        int n = 4;
        int a = 3;
        int s = 0;
        int[][] A = {
                {1, 1, 1, 0},
                {1, 2, 2, 2},
                {1, 2, 3, 3},
                {0, 2, 3, 4},
        };
        int[] B = {1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 1, 2};

        int i = 2;
        int j = 1;
        int bloc = 0;

        if (i >= j) {
            for(int x = 1; x <= (a-(i-j)-1); x++) { s += n-(a-(x)); }
            bloc = s + j;
        }
        else {
            for(int x = 1; x <= (a); x++) {
                s += n-(a-(x));
            }
            for(int x = 1; x <= (j-i)-1; x++) { s += n-x; }
            bloc = s + i;
        }

        System.out.format("A[%d][%d]: %d >>> B[%d]: %d\n",
                i, j, A[i][j],
                bloc, B[bloc]
        );

    }

}
