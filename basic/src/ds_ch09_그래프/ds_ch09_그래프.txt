용어정리

    그래프
        노드(or 정점, V(G)), 간선(E(G)) 집합으로 이뤄진 자료구조.
        표기: G=(V, E)
        이 때 간선은 자기 자신으로 이어질 수 없음
        방향 그래프: 간선에 방향이 있는 그래프; <V, U> != <U, V>
        무방향 그래프: 간선에 방향이 없는 그래프; <V, U> == <U, V>

    인접 노드: 무방향 그래프에서 어떤 간선으로 직결된 서로 다른 두 정점
    부속 노드: 어떤 간선에 붙어있는 서로 다른 두 노드
        *** 참고: 인접, 부속 여부는 방향과는 관련 없다 >>> 아크가 한쪽 방향만 있더라도 인접, 부속된 것

    부분 그래프
        어떤 그래프의 (정점, 간선)의 일부로만 이뤄진 그래프
        여기서 간선은 필수가 아님 >>> 정점 딸랑 하나만 있어도 부분 그래프로 간주

    단순 경로: 모두 상이한 간선들로 이뤄진 경로
    사이클
        종점이 자기 자신인 단순 경로
        사이클 길이는 무방향 그래프는 최소 3, 방향 그래프는 최소 2이다

    연결 상태에 따른 그래프 구분 (무방향 그래프라고 가정)
        어디든 갈 수 있으면 연결 그래프 >>> 어떻게든 경로가 있는 경우
        못가는 곳이 있으면 단절 그래프
        최대의 간선과 정점으로 이뤄졌다면 최대 연결 부분 그래프
            G1의 경우 자기 자신
            G3의 경우 각각 {0, 1, 2}, {3, 4}로 이뤄진 그래프
            >>> ~ 제일 큰 권역

    왕복 가능 여부에 따른 방향 그래프 구분
        강력 연결: 왕복이 가능하면
        약한 연결: 왕복이 안되면

    정점의 차수
        정점에 부속한 간선 수.
        방향 그래프에선 진입, 진출 차수를 나눔
        무방향 그래프에서 간선의 수는 모든 정점의 차수 합/2와 같음

    인접 집합: 어떤 정점에 부속한 간선의 종점들



그래프 표현

    인접 행렬
        n * n인 이차원 배열로 표현하는 형태 (n=정점 수)
        배열 값은 0 OR 1
        정점 i에서 j로 가는 간선이 있다면 1, 아니면 0
        무방향 그래프의 경우엔 상/하삼각만 저장하는 것도 가능
        행의 합은 차수와 같다

    인접 리스트
        방법 1: 길이 n의 리스트에 각 정점에 부속한 간선의 행선지 리스트를 저장하는 방식
        방법 2: 길이 n+2e+1의 리스트에 첫 n개엔 각 정점에 부속한 간선 정보 시작 위치를, 나머지엔 간선의 행선지를 저장하는 방식
        방법 3: (방향 그래프의 경우) 방법 1 + 역인접 리스트도 별도 저장하는 방식

    인접 다중 리스트
        간선 리스트를 만들어 정점들이 공유하는 방식
        간선을 표현하는 노드 구조는 다음과 같다
            ( 방문 여부, 시점 i, 종점 j, i에 부속된 그 다음 간선, j에 부속된 그 다음 간선)
        정점 포인트들은 자신이 가진 간선들 중 가장 첫번째 것을 가리킨다



그래프 순회
    DFS
        1. 정점 i를 방문한다
        2. 인접한 정점 중 미방문 정점을 스택에 저장한다
        3. i에 방문 표시를 한다.
        4. 스택에서 하나를 꺼낸다. 이 때 방문 표시가 없다면 새로운 i로 삼는다
        5. 스택이 빌 때까지 1 ~ 4를 반복한다

        (교재에선 키가 작은 순으로 돌게 해서 그런 모양이 나옴)

    BFS
        1. 정점 i를 방문한다
        2. 인접한 정점 중 미방문 정점을 큐에 저장한다
        3. i에 방문 표시를 한다.
        4. 큐에서 하나를 꺼낸다. 이 때 방문 표시가 없다면 새로운 i로 삼는다
        5. 큐가 빌 때까지 1 ~ 4를 반복한다


